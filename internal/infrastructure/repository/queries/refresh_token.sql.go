// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package db_queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrUpdateRefreshToken = `-- name: CreateOrUpdateRefreshToken :exec
WITH updated AS (
    UPDATE refresh_token
    SET deleted_at = NOW()
    WHERE user_id = $1
      AND token != $2
      AND deleted_at IS NULL
    RETURNING id, user_id, token, expired_at, deleted_at
)
INSERT INTO refresh_token (
    user_id, 
    token, 
    expired_at
)
VALUES ($1, $2, $3)
ON CONFLICT (token) DO NOTHING
`

type CreateOrUpdateRefreshTokenParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiredAt time.Time
}

func (q *Queries) CreateOrUpdateRefreshToken(ctx context.Context, arg CreateOrUpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateRefreshToken, arg.UserID, arg.Token, arg.ExpiredAt)
	return err
}

const deleteRefreshTokenByUserID = `-- name: DeleteRefreshTokenByUserID :exec
UPDATE 
    refresh_token
SET 
    deleted_at = COALESCE(deleted_at, NOW())
WHERE 
    user_id = $1
`

func (q *Queries) DeleteRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenByUserID, userID)
	return err
}

const getRefreshTokenByUserID = `-- name: GetRefreshTokenByUserID :one


SELECT
    ref_t.id, ref_t.user_id, ref_t.token, ref_t.expired_at, ref_t.deleted_at
FROM 
    refresh_token ref_t
WHERE
    ref_t.user_id = $1
    AND ref_t.deleted_at IS NULL
    AND ref_t.expired_at > NOW()
`

type GetRefreshTokenByUserIDRow struct {
	RefreshToken RefreshToken
}

// refresh_token.sql
func (q *Queries) GetRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) (GetRefreshTokenByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByUserID, userID)
	var i GetRefreshTokenByUserIDRow
	err := row.Scan(
		&i.RefreshToken.ID,
		&i.RefreshToken.UserID,
		&i.RefreshToken.Token,
		&i.RefreshToken.ExpiredAt,
		&i.RefreshToken.DeletedAt,
	)
	return i, err
}

const listRefreshToken = `-- name: ListRefreshToken :many
SELECT
    ref_t.id, ref_t.user_id, ref_t.token, ref_t.expired_at, ref_t.deleted_at
FROM 
    refresh_token ref_t
WHERE
    ($1::UUID[] IS NULL OR u.id = ANY($1::UUID[]))
    AND ref_t.deleted_at IS NULL
    AND ref_t.expired_at > NOW()
LIMIT $3
OFFSET $2
`

type ListRefreshTokenParams struct {
	UserIds []uuid.UUID
	Offset  int32
	Limit   *int32
}

type ListRefreshTokenRow struct {
	RefreshToken RefreshToken
}

func (q *Queries) ListRefreshToken(ctx context.Context, arg ListRefreshTokenParams) ([]ListRefreshTokenRow, error) {
	rows, err := q.db.Query(ctx, listRefreshToken, arg.UserIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRefreshTokenRow{}
	for rows.Next() {
		var i ListRefreshTokenRow
		if err := rows.Scan(
			&i.RefreshToken.ID,
			&i.RefreshToken.UserID,
			&i.RefreshToken.Token,
			&i.RefreshToken.ExpiredAt,
			&i.RefreshToken.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
