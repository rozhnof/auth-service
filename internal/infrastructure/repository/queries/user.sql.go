// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db_queries

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id,
    email,
    hash_password
) VALUES (
    $1, $2, $3
)
`

type CreateUserParams struct {
	ID           uuid.UUID
	Email        string
	HashPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.Email, arg.HashPassword)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE 
    users
SET 
    deleted_at = COALESCE(deleted_at, NOW())
WHERE 
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    u.id, u.email, u.confirmed, u.hash_password, u.deleted_at
FROM 
    users u
WHERE 
    u.email = $1
    AND u.deleted_at IS NULL
`

type GetUserByEmailRow struct {
	User User
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Email,
		&i.User.Confirmed,
		&i.User.HashPassword,
		&i.User.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one


SELECT 
    u.id, u.email, u.confirmed, u.hash_password, u.deleted_at
FROM 
    users u
WHERE 
    u.id = $1
    AND u.deleted_at IS NULL
`

type GetUserByIDRow struct {
	User User
}

// user.sql
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Email,
		&i.User.Confirmed,
		&i.User.HashPassword,
		&i.User.DeletedAt,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT 
    u.id, u.email, u.confirmed, u.hash_password, u.deleted_at
FROM 
    users u
JOIN 
    refresh_token ref_t ON u.id = ref_t.user_id
WHERE
    ref_t.token = $1
    AND ref_t.deleted_at IS NULL
`

type GetUserByRefreshTokenRow struct {
	User User
}

func (q *Queries) GetUserByRefreshToken(ctx context.Context, token string) (GetUserByRefreshTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserByRefreshToken, token)
	var i GetUserByRefreshTokenRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Email,
		&i.User.Confirmed,
		&i.User.HashPassword,
		&i.User.DeletedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT 
    u.id, u.email, u.confirmed, u.hash_password, u.deleted_at
FROM 
    users u
WHERE 
    ($1::UUID[] IS NULL OR u.id = ANY($1::UUID[]))
    AND u.deleted_at IS NULL
LIMIT $3
OFFSET $2
`

type ListUserParams struct {
	UserIds []uuid.UUID
	Offset  int32
	Limit   *int32
}

type ListUserRow struct {
	User User
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]ListUserRow, error) {
	rows, err := q.db.Query(ctx, listUser, arg.UserIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserRow{}
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Email,
			&i.User.Confirmed,
			&i.User.HashPassword,
			&i.User.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE 
    users
SET  
    email = $2,
    hash_password = $3,
    confirmed = $4
WHERE 
    users.id = $1
`

type UpdateUserParams struct {
	ID           uuid.UUID
	Email        string
	HashPassword string
	Confirmed    bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.HashPassword,
		arg.Confirmed,
	)
	return err
}
