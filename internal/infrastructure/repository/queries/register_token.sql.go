// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: register_token.sql

package db_queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrUpdateRegisterToken = `-- name: CreateOrUpdateRegisterToken :exec
WITH updated AS (
    UPDATE register_token
    SET deleted_at = NOW()
    WHERE user_id = $1
      AND token != $2
      AND deleted_at IS NULL
    RETURNING id, user_id, token, expired_at, deleted_at
)
INSERT INTO register_token (
    user_id, 
    token, 
    expired_at
)
VALUES ($1, $2, $3)
ON CONFLICT (token) DO NOTHING
`

type CreateOrUpdateRegisterTokenParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiredAt time.Time
}

func (q *Queries) CreateOrUpdateRegisterToken(ctx context.Context, arg CreateOrUpdateRegisterTokenParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateRegisterToken, arg.UserID, arg.Token, arg.ExpiredAt)
	return err
}

const deleteRegisterTokenByUserID = `-- name: DeleteRegisterTokenByUserID :exec
UPDATE 
    register_token
SET 
    deleted_at = COALESCE(deleted_at, NOW())
WHERE 
    user_id = $1
`

func (q *Queries) DeleteRegisterTokenByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRegisterTokenByUserID, userID)
	return err
}

const getRegisterTokenByUserID = `-- name: GetRegisterTokenByUserID :one


SELECT
    reg_t.id, reg_t.user_id, reg_t.token, reg_t.expired_at, reg_t.deleted_at
FROM 
    register_token reg_t
WHERE
    reg_t.user_id = $1
    AND reg_t.deleted_at IS NULL
    AND reg_t.expired_at > NOW()
`

type GetRegisterTokenByUserIDRow struct {
	RegisterToken RegisterToken
}

// register_token.sql
func (q *Queries) GetRegisterTokenByUserID(ctx context.Context, userID uuid.UUID) (GetRegisterTokenByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getRegisterTokenByUserID, userID)
	var i GetRegisterTokenByUserIDRow
	err := row.Scan(
		&i.RegisterToken.ID,
		&i.RegisterToken.UserID,
		&i.RegisterToken.Token,
		&i.RegisterToken.ExpiredAt,
		&i.RegisterToken.DeletedAt,
	)
	return i, err
}

const listRegisterToken = `-- name: ListRegisterToken :many
SELECT
    reg_t.id, reg_t.user_id, reg_t.token, reg_t.expired_at, reg_t.deleted_at
FROM 
    register_token reg_t
WHERE
    ($1::UUID[] IS NULL OR u.id = ANY($1::UUID[]))
    AND reg_t.deleted_at IS NULL
    AND reg_t.expired_at > NOW()
LIMIT $3
OFFSET $2
`

type ListRegisterTokenParams struct {
	UserIds []uuid.UUID
	Offset  int32
	Limit   *int32
}

type ListRegisterTokenRow struct {
	RegisterToken RegisterToken
}

func (q *Queries) ListRegisterToken(ctx context.Context, arg ListRegisterTokenParams) ([]ListRegisterTokenRow, error) {
	rows, err := q.db.Query(ctx, listRegisterToken, arg.UserIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRegisterTokenRow{}
	for rows.Next() {
		var i ListRegisterTokenRow
		if err := rows.Scan(
			&i.RegisterToken.ID,
			&i.RegisterToken.UserID,
			&i.RegisterToken.Token,
			&i.RegisterToken.ExpiredAt,
			&i.RegisterToken.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
